#!/usr/bin/perl -w
# java-info -- lintian collection script

# Copyright (C) 2011 Vincent Fourmond
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

package Lintian::coll::java_info;

no lib '.';

use strict;
use warnings;
use autodie;

use Archive::Zip qw( :ERROR_CODES :CONSTANTS );
use FileHandle;

use lib "$ENV{'LINTIAN_ROOT'}/lib/";
use Lintian::Collect;
use Lintian::Command qw(spawn reap);
use Lintian::Util qw(internal_error rstrip);

sub collect {
    my ($pkg, $type, $dir) = @_;
    my $info = Lintian::Collect->new($pkg, $type, $dir);

    unless (-d "$dir/unpacked/") {
        internal_error('java-info called with the wrong dir argument');
    }

    if (-f "$dir/java-info.gz") {
        unlink("$dir/java-info.gz");
    }

    # We lazily start the gzip process to avoid creating the java-info.gz
    # file when there are no jar files in the package.
    my %opts;
    my $open_java_info = sub {
        %opts = (
            pipe_in => FileHandle->new,
            out => "$dir/java-info.gz",
            fail => 'error'
        );
        spawn(\%opts, ['gzip', '-9c']);
        $opts{pipe_in}->blocking(1);
    };
    my $errorhandler = sub {
        my ($err) = @_;
        $err =~ s/\r?\n/ /g;
        rstrip($err);
        print {$opts{pipe_in}} "-- ERROR: $err\n";
    };

    chdir("$dir/unpacked");

    # Without this Archive::Zip will emit errors to standard error for
    # faulty zip files - but that is not what we want.  AFAICT, it is
    # the only way to get a textual error as well, so (ab)use it for
    # this purpose while we are at it.
    my $oldhandler = Archive::Zip::setErrorHandler($errorhandler);

  FILE:
    foreach my $file ($info->sorted_index) {
        next unless $file->is_file;
        my $filename = $file->name;

        # Wheezy's version of file calls "jar files" for "Zip archive".
        # Newer versions seem to call them "Java Jar file".
        # Jessie also introduced "Java archive data (JAR)"...
        next unless $info->file_info($filename) =~ m/
                     Java [ ] (?:Jar [ ] file|archive [ ] data)
                   | Zip [ ] archive
                   | JAR /xo;

        if ($filename =~ m#\S+\.jar$#i) {
            my $manifest;
            my $azip = Archive::Zip->new;

            $open_java_info->() unless %opts;
            # This script needs unzip, there's no way around.
            print {$opts{pipe_in}} "-- $filename\n";

            $azip->read($filename) == AZ_OK or next FILE;

            # First, the file list:
            foreach my $member ($azip->members) {
                my $name = $member->fileName;
                my $jversion;
                next if $member->isDirectory;
                $manifest = $member if $name =~ m@^META-INF/MANIFEST.MF$@oi;
                if ($name =~ m/\.class$/o) {
                    # Collect the Major version of the class file.
                    my ($contents, $zerr) = $member->contents;
                    next FILE unless $zerr == AZ_OK;

                    # Ensure we can read at least 8 bytes for the unpack.
                    next if length($contents) < 8;

                    # translation of the unpack
                    #  NN NN NN NN, nn nn, nn nn   - bytes read
                    #     $magic  , __ __, $major  - variables
                    my ($magic, undef, $major) = unpack('Nnn', $contents);
                    $jversion = $major if $magic == 0xCAFEBABE;
                }
                $jversion //= '-';
                print {$opts{pipe_in}} $name, ": $jversion\n";
            }

            if ($manifest) {
                print {$opts{pipe_in}} "-- MANIFEST: $filename\n";

                my ($contents, $zerr) = $manifest->contents;
                next FILE unless $zerr == AZ_OK;
                my $first = 1;
                foreach my $line (split m/\n/, $contents) {
                    $line =~ s/\r//go;
                    if ($line =~ m/^(\S+:)\s*(.*)/o) {
                        print {$opts{pipe_in}} "\n" unless $first;
                        $first = 0;
                        print {$opts{pipe_in}} "  $1 $2";
                    }
                    if ($line =~ m/^ /o) {
                        print {$opts{pipe_in}} substr $line, 1;
                    }
                }
                print {$opts{pipe_in}} "\n" unless $first;
            }
        }
    }

    Archive::Zip::setErrorHandler($oldhandler);

    if (%opts) {
        close($opts{pipe_in});
        reap(\%opts);
    }

    return;
}

collect(@ARGV) unless caller;

1;

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
